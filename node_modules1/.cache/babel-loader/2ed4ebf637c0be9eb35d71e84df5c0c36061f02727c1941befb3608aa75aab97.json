{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amit\\\\React\\\\flight-booking-website-2.0\\\\src\\\\Loading.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Loading = () => {\n  _s();\n  // Create a loading state variable with an initial value of false\n  const [loading, setLoading] = useState(false);\n\n  // Simulate a loading operation with a setTimeout\n  const startLoading = () => {\n    setLoading(true);\n\n    // Simulate a loading delay (remove this in your actual implementation)\n    setTimeout(() => {\n      setLoading(false);\n    }, 3000); // Adjust the delay as needed\n  };\n\n  // Call startLoading when the component mounts (e.g., when you navigate to a new page)\n  useEffect(() => {\n    startLoading();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(ReactLoading, {\n      type: \"spinningBubbles\",\n      color: \"blue\",\n      height: 100,\n      width: 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Render your page content when not loading\n    _jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(Loading, \"bp7W7BLZaxNmS0ceaCBH82+KoGQ=\");\n_c = Loading;\nexport default Loading;\nvar _c;\n$RefreshReg$(_c, \"Loading\");","map":{"version":3,"names":["React","useState","useEffect","ReactLoading","jsxDEV","_jsxDEV","Loading","_s","loading","setLoading","startLoading","setTimeout","children","type","color","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Amit/React/flight-booking-website-2.0/src/Loading.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nconst Loading = () => {\r\n  // Create a loading state variable with an initial value of false\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Simulate a loading operation with a setTimeout\r\n  const startLoading = () => {\r\n    setLoading(true);\r\n\r\n    // Simulate a loading delay (remove this in your actual implementation)\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 3000); // Adjust the delay as needed\r\n  };\r\n\r\n  // Call startLoading when the component mounts (e.g., when you navigate to a new page)\r\n  useEffect(() => {\r\n    startLoading();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <ReactLoading\r\n          type=\"spinningBubbles\"\r\n          color=\"blue\"\r\n          height={100}\r\n          width={50}\r\n        />\r\n      ) : (\r\n        // Render your page content when not loading\r\n        <div>\r\n          {/* Your page content goes here */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACzBD,UAAU,CAAC,IAAI,CAAC;;IAEhB;IACAE,UAAU,CAAC,MAAM;MACfF,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC;;EAED;EACAP,SAAS,CAAC,MAAM;IACdQ,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAO,QAAA,EACGJ,OAAO,gBACNH,OAAA,CAACF,YAAY;MACXU,IAAI,EAAC,iBAAiB;MACtBC,KAAK,EAAC,MAAM;MACZC,MAAM,EAAE,GAAI;MACZC,KAAK,EAAE;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC;IAAA;IAEF;IACAf,OAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEK;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACb,EAAA,CApCID,OAAO;AAAAe,EAAA,GAAPf,OAAO;AAsCb,eAAeA,OAAO;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}