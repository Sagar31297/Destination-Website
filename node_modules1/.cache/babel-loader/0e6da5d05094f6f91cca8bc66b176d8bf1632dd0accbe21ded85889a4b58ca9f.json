{"ast":null,"code":"import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { ErrorFactory, FirebaseError, getModularInstance, calculateBackoffMillis, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport '@firebase/installations';\nconst name = \"@firebase/remote-config\";\nconst version = \"0.4.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\nclass RemoteConfigAbortSignal {\n  constructor() {\n    this.listeners = [];\n  }\n  addEventListener(listener) {\n    this.listeners.push(listener);\n  }\n  abort() {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst RC_COMPONENT_NAME = 'remote-config';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ERROR_DESCRIPTION_MAP = {\n  [\"registration-window\" /* ErrorCode.REGISTRATION_WINDOW */]: 'Undefined window object. This SDK only supports usage in a browser environment.',\n  [\"registration-project-id\" /* ErrorCode.REGISTRATION_PROJECT_ID */]: 'Undefined project identifier. Check Firebase app initialization.',\n  [\"registration-api-key\" /* ErrorCode.REGISTRATION_API_KEY */]: 'Undefined API key. Check Firebase app initialization.',\n  [\"registration-app-id\" /* ErrorCode.REGISTRATION_APP_ID */]: 'Undefined app identifier. Check Firebase app initialization.',\n  [\"storage-open\" /* ErrorCode.STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\" /* ErrorCode.STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\" /* ErrorCode.STORAGE_SET */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"storage-delete\" /* ErrorCode.STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [\"fetch-client-network\" /* ErrorCode.FETCH_NETWORK */]: 'Fetch client failed to connect to a network. Check Internet connection.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-timeout\" /* ErrorCode.FETCH_TIMEOUT */]: 'The config fetch request timed out. ' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [\"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [\"fetch-client-parse\" /* ErrorCode.FETCH_PARSE */]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status\" /* ErrorCode.FETCH_STATUS */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"indexed-db-unavailable\" /* ErrorCode.INDEXED_DB_UNAVAILABLE */]: 'Indexed DB is not supported by current browser'\n};\nconst ERROR_FACTORY = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP);\n// Note how this is like typeof/instanceof, but for ErrorCode.\nfunction hasErrorCode(e, errorCode) {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\nclass Value {\n  constructor(_source, _value = DEFAULT_VALUE_FOR_STRING) {\n    this._source = _source;\n    this._value = _value;\n  }\n  asString() {\n    return this._value;\n  }\n  asBoolean() {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n  asNumber() {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n  getSource() {\n    return this._source;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n * @returns A {@link RemoteConfig} instance.\r\n *\r\n * @public\r\n */\nfunction getRemoteConfig(app = getApp()) {\n  app = getModularInstance(app);\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n  return rcProvider.getImmediate();\n}\n/**\r\n * Makes the last fetched config available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\nasync function activate(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([rc._storage.getLastSuccessfulFetchResponse(), rc._storage.getActiveConfigEtag()]);\n  if (!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag) {\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n  }\n  await Promise.all([rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config), rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)]);\n  return true;\n}\n/**\r\n * Ensures the last activated config are available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\r\n * @public\r\n */\nfunction ensureInitialized(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n  return rc._initializePromise;\n}\n/**\r\n * Fetches and caches configuration from the Remote Config service.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @public\r\n */\nasync function fetchConfig(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n  const abortSignal = new RemoteConfigAbortSignal();\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n  }, rc.settings.fetchTimeoutMillis);\n  // Catches *all* errors thrown by client so status can be set consistently.\n  try {\n    await rc._client.fetch({\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal\n    });\n    await rc._storageCache.setLastFetchStatus('success');\n  } catch (e) {\n    const lastFetchStatus = hasErrorCode(e, \"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */) ? 'throttle' : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n  }\n}\n/**\r\n * Gets all config.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns All config.\r\n *\r\n * @public\r\n */\nfunction getAll(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {});\n}\n/**\r\n * Gets the value for the given key as a boolean.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a boolean.\r\n * @public\r\n */\nfunction getBoolean(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n/**\r\n * Gets the value for the given key as a number.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a number.\r\n *\r\n * @public\r\n */\nfunction getNumber(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n/**\r\n * Gets the value for the given key as a string.\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a string.\r\n *\r\n * @public\r\n */\nfunction getString(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n/**\r\n * Gets the {@link Value} for the given key.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key.\r\n *\r\n * @public\r\n */\nfunction getValue(remoteConfig, key) {\n  const rc = getModularInstance(remoteConfig);\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(`A value was requested for key \"${key}\" before SDK initialization completed.` + ' Await on ensureInitialized if the intent was to get a previously activated value.');\n  }\n  const activeConfig = rc._storageCache.getActiveConfig();\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new Value('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new Value('default', String(rc.defaultConfig[key]));\n  }\n  rc._logger.debug(`Returning static value for key \"${key}\".` + ' Define a default or remote value if this is unintentional.');\n  return new Value('static');\n}\n/**\r\n * Defines the log level to use.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param logLevel - The log level to set.\r\n *\r\n * @public\r\n */\nfunction setLogLevel(remoteConfig, logLevel) {\n  const rc = getModularInstance(remoteConfig);\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = LogLevel.DEBUG;\n      break;\n    case 'silent':\n      rc._logger.logLevel = LogLevel.SILENT;\n      break;\n    default:\n      rc._logger.logLevel = LogLevel.ERROR;\n  }\n}\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\nfunction getAllKeys(obj1 = {}, obj2 = {}) {\n  return Object.keys(Object.assign(Object.assign({}, obj1), obj2));\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\nclass CachingClient {\n  constructor(client, storage, storageCache, logger) {\n    this.client = client;\n    this.storage = storage;\n    this.storageCache = storageCache;\n    this.logger = logger;\n  }\n  /**\r\n   * Returns true if the age of the cached fetched configs is less than or equal to\r\n   * {@link Settings#minimumFetchIntervalInSeconds}.\r\n   *\r\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n   * native Fetch API.\r\n   *\r\n   * <p>Visible for testing.\r\n   */\n  isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n    this.logger.debug('Config fetch cache check.' + ` Cache age millis: ${cacheAgeMillis}.` + ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` + ` Is cache hit: ${isCachedDataFresh}.`);\n    return isCachedDataFresh;\n  }\n  async fetch(request) {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] = await Promise.all([this.storage.getLastSuccessfulFetchTimestampMillis(), this.storage.getLastSuccessfulFetchResponse()]);\n    // Exits early on cache hit.\n    if (lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {\n      return lastSuccessfulFetchResponse;\n    }\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n    // Fetch throws for non-success responses, so success is guaranteed here.\n    const storageOperations = [\n    // Uses write-through cache for consistency with synchronous public API.\n    this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())];\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\n    }\n    await Promise.all(storageOperations);\n    return response;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\nfunction getUserLanguage(navigatorLanguage = navigator) {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\nclass RestClient {\n  constructor(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\n    this.firebaseInstallations = firebaseInstallations;\n    this.sdkVersion = sdkVersion;\n    this.namespace = namespace;\n    this.projectId = projectId;\n    this.apiKey = apiKey;\n    this.appId = appId;\n  }\n  /**\r\n   * Fetches from the Remote Config REST API.\r\n   *\r\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n   * connect to the network.\r\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n   * fetch response.\r\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n   */\n  async fetch(request) {\n    const [installationId, installationToken] = await Promise.all([this.firebaseInstallations.getId(), this.firebaseInstallations.getToken()]);\n    const urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n    const requestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = \"fetch-client-network\" /* ErrorCode.FETCH_NETWORK */;\n      if ((originalError === null || originalError === void 0 ? void 0 : originalError.name) === 'AbortError') {\n        errorCode = \"fetch-timeout\" /* ErrorCode.FETCH_TIMEOUT */;\n      }\n\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n      });\n    }\n    let status = response.status;\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n    let config;\n    let state;\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(\"fetch-client-parse\" /* ErrorCode.FETCH_PARSE */, {\n          originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(\"fetch-status\" /* ErrorCode.FETCH_STATUS */, {\n        httpStatus: status\n      });\n    }\n    return {\n      status,\n      eTag: responseEtag,\n      config\n    };\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    const timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */, {\n        throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\nclass RetryingClient {\n  constructor(client, storage) {\n    this.client = client;\n    this.storage = storage;\n  }\n  async fetch(request) {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n    return this.attemptFetch(request, throttleMetadata);\n  }\n  /**\r\n   * A recursive helper for attempting a fetch request repeatedly.\r\n   *\r\n   * @throws any non-retriable errors.\r\n   */\n  async attemptFetch(request, {\n    throttleEndTimeMillis,\n    backoffCount\n  }) {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n    try {\n      const response = await this.client.fetch(request);\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\nclass RemoteConfig {\n  constructor(\n  // Required by FirebaseServiceFactory interface.\n  app,\n  // JS doesn't support private yet\n  // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n  // underscore prefix.\n  /**\r\n   * @internal\r\n   */\n  _client,\n  /**\r\n   * @internal\r\n   */\n  _storageCache,\n  /**\r\n   * @internal\r\n   */\n  _storage,\n  /**\r\n   * @internal\r\n   */\n  _logger) {\n    this.app = app;\n    this._client = _client;\n    this._storageCache = _storageCache;\n    this._storage = _storage;\n    this._logger = _logger;\n    /**\r\n     * Tracks completion of initialization promise.\r\n     * @internal\r\n     */\n    this._isInitializationComplete = false;\n    this.settings = {\n      fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n      minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n    };\n    this.defaultConfig = {};\n  }\n  get fetchTimeMillis() {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n  get lastFetchStatus() {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\nfunction toFirebaseError(event, errorCode) {\n  const originalError = event.target.error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && (originalError === null || originalError === void 0 ? void 0 : originalError.message)\n  });\n}\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\nconst APP_NAMESPACE_STORE = 'app_namespace_store';\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n// Visible for testing.\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        reject(toFirebaseError(event, \"storage-open\" /* ErrorCode.STORAGE_OPEN */));\n      };\n\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(ERROR_FACTORY.create(\"storage-open\" /* ErrorCode.STORAGE_OPEN */, {\n        originalErrorMessage: error === null || error === void 0 ? void 0 : error.message\n      }));\n    }\n  });\n}\n/**\r\n * Abstracts data persistence.\r\n */\nclass Storage {\n  /**\r\n   * @param appId enables storage segmentation by app (ID + name).\r\n   * @param appName enables storage segmentation by app (ID + name).\r\n   * @param namespace enables storage segmentation by namespace.\r\n   */\n  constructor(appId, appName, namespace, openDbPromise = openDatabase()) {\n    this.appId = appId;\n    this.appName = appName;\n    this.namespace = namespace;\n    this.openDbPromise = openDbPromise;\n  }\n  getLastFetchStatus() {\n    return this.get('last_fetch_status');\n  }\n  setLastFetchStatus(status) {\n    return this.set('last_fetch_status', status);\n  }\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis() {\n    return this.get('last_successful_fetch_timestamp_millis');\n  }\n  setLastSuccessfulFetchTimestampMillis(timestamp) {\n    return this.set('last_successful_fetch_timestamp_millis', timestamp);\n  }\n  getLastSuccessfulFetchResponse() {\n    return this.get('last_successful_fetch_response');\n  }\n  setLastSuccessfulFetchResponse(response) {\n    return this.set('last_successful_fetch_response', response);\n  }\n  getActiveConfig() {\n    return this.get('active_config');\n  }\n  setActiveConfig(config) {\n    return this.set('active_config', config);\n  }\n  getActiveConfigEtag() {\n    return this.get('active_config_etag');\n  }\n  setActiveConfigEtag(etag) {\n    return this.set('active_config_etag', etag);\n  }\n  getThrottleMetadata() {\n    return this.get('throttle_metadata');\n  }\n  setThrottleMetadata(metadata) {\n    return this.set('throttle_metadata', metadata);\n  }\n  deleteThrottleMetadata() {\n    return this.delete('throttle_metadata');\n  }\n  async get(key) {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, \"storage-get\" /* ErrorCode.STORAGE_GET */));\n        };\n\n        request.onsuccess = event => {\n          const result = event.target.result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(ERROR_FACTORY.create(\"storage-get\" /* ErrorCode.STORAGE_GET */, {\n          originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n        }));\n      }\n    });\n  }\n  async set(key, value) {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = event => {\n          reject(toFirebaseError(event, \"storage-set\" /* ErrorCode.STORAGE_SET */));\n        };\n\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(ERROR_FACTORY.create(\"storage-set\" /* ErrorCode.STORAGE_SET */, {\n          originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n        }));\n      }\n    });\n  }\n  async delete(key) {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, \"storage-delete\" /* ErrorCode.STORAGE_DELETE */));\n        };\n\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(ERROR_FACTORY.create(\"storage-delete\" /* ErrorCode.STORAGE_DELETE */, {\n          originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n        }));\n      }\n    });\n  }\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key) {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\nclass StorageCache {\n  constructor(storage) {\n    this.storage = storage;\n  }\n  /**\r\n   * Memory-only getters\r\n   */\n  getLastFetchStatus() {\n    return this.lastFetchStatus;\n  }\n  getLastSuccessfulFetchTimestampMillis() {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n  getActiveConfig() {\n    return this.activeConfig;\n  }\n  /**\r\n   * Read-ahead getter\r\n   */\n  async loadFromStorage() {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n    const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n    }\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n  /**\r\n   * Write-through setters\r\n   */\n  setLastFetchStatus(status) {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n  setLastSuccessfulFetchTimestampMillis(timestampMillis) {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n  setActiveConfig(activeConfig) {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerRemoteConfig() {\n  _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n  function remoteConfigFactory(container, {\n    instanceIdentifier: namespace\n  }) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container.getProvider('installations-internal').getImmediate();\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"registration-window\" /* ErrorCode.REGISTRATION_WINDOW */);\n    }\n    // Guards against the SDK being used when indexedDB is not available.\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(\"indexed-db-unavailable\" /* ErrorCode.INDEXED_DB_UNAVAILABLE */);\n    }\n    // Normalizes optional inputs.\n    const {\n      projectId,\n      apiKey,\n      appId\n    } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"registration-project-id\" /* ErrorCode.REGISTRATION_PROJECT_ID */);\n    }\n\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"registration-api-key\" /* ErrorCode.REGISTRATION_API_KEY */);\n    }\n\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"registration-app-id\" /* ErrorCode.REGISTRATION_APP_ID */);\n    }\n\n    namespace = namespace || 'firebase';\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n    const logger = new Logger(name);\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = LogLevel.ERROR;\n    const restClient = new RestClient(installations,\n    // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n    SDK_VERSION, namespace, projectId, apiKey, appId);\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\n    const remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger);\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ensureInitialized(remoteConfigInstance);\n    return remoteConfigInstance;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\r\n *\r\n * Performs fetch and activate operations, as a convenience.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\nasync function fetchAndActivate(remoteConfig) {\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n/**\r\n * This method provides two different checks:\r\n *\r\n * 1. Check if IndexedDB exists in the browser environment.\r\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\r\n *\r\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\r\n * can be initialized in this environment, or false if it cannot.\r\n * @public\r\n */\nasync function isSupported() {\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n  try {\n    const isDBOpenable = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\r\n * Firebase Remote Config\r\n *\r\n * @packageDocumentation\r\n */\n/** register component and version */\nregisterRemoteConfig();\nexport { activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getRemoteConfig, getString, getValue, isSupported, setLogLevel };","map":{"version":3,"names":["RemoteConfigAbortSignal","constructor","listeners","addEventListener","listener","push","abort","forEach","RC_COMPONENT_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","hasErrorCode","e","errorCode","FirebaseError","code","indexOf","DEFAULT_VALUE_FOR_BOOLEAN","DEFAULT_VALUE_FOR_STRING","DEFAULT_VALUE_FOR_NUMBER","BOOLEAN_TRUTHY_VALUES","Value","_source","_value","asString","asBoolean","toLowerCase","asNumber","num","Number","isNaN","getSource","getRemoteConfig","app","getApp","getModularInstance","rcProvider","_getProvider","getImmediate","activate","remoteConfig","rc","lastSuccessfulFetchResponse","activeConfigEtag","Promise","all","_storage","getLastSuccessfulFetchResponse","getActiveConfigEtag","config","eTag","_storageCache","setActiveConfig","setActiveConfigEtag","ensureInitialized","_initializePromise","loadFromStorage","then","_isInitializationComplete","fetchConfig","abortSignal","setTimeout","settings","fetchTimeoutMillis","_client","fetch","cacheMaxAgeMillis","minimumFetchIntervalMillis","signal","setLastFetchStatus","lastFetchStatus","getAll","getAllKeys","getActiveConfig","defaultConfig","reduce","allConfigs","key","getValue","getBoolean","getNumber","getString","_logger","debug","activeConfig","undefined","String","setLogLevel","logLevel","LogLevel","DEBUG","SILENT","ERROR","obj1","obj2","Object","keys","assign","CachingClient","client","storage","storageCache","logger","isCachedDataFresh","lastSuccessfulFetchTimestampMillis","cacheAgeMillis","Date","now","request","getLastSuccessfulFetchTimestampMillis","response","storageOperations","setLastSuccessfulFetchTimestampMillis","status","setLastSuccessfulFetchResponse","getUserLanguage","navigatorLanguage","navigator","languages","language","RestClient","firebaseInstallations","sdkVersion","namespace","projectId","apiKey","appId","installationId","installationToken","getId","getToken","urlBase","window","FIREBASE_REMOTE_CONFIG_URL_BASE","url","headers","requestBody","sdk_version","app_instance_id","app_instance_id_token","app_id","language_code","options","method","body","JSON","stringify","fetchPromise","timeoutPromise","_resolve","reject","error","Error","name","race","originalError","create","originalErrorMessage","message","responseEtag","get","state","responseBody","json","httpStatus","setAbortableTimeout","throttleEndTimeMillis","resolve","backoffMillis","Math","max","timeout","clearTimeout","isRetriableError","customData","RetryingClient","throttleMetadata","getThrottleMetadata","backoffCount","attemptFetch","deleteThrottleMetadata","calculateBackoffMillis","setThrottleMetadata","DEFAULT_FETCH_TIMEOUT_MILLIS","DEFAULT_CACHE_MAX_AGE_MILLIS","RemoteConfig","fetchTimeMillis","getLastFetchStatus","toFirebaseError","event","target","APP_NAMESPACE_STORE","DB_NAME","DB_VERSION","openDatabase","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","Storage","appName","openDbPromise","set","timestamp","etag","metadata","delete","transaction","objectStore","compositeKey","createCompositeKey","value","put","join","StorageCache","lastFetchStatusPromise","lastSuccessfulFetchTimestampMillisPromise","activeConfigPromise","timestampMillis","registerRemoteConfig","_registerComponent","Component","remoteConfigFactory","setMultipleInstances","registerVersion","version","container","instanceIdentifier","getProvider","installations","isIndexedDBAvailable","Logger","restClient","SDK_VERSION","retryingClient","cachingClient","remoteConfigInstance","fetchAndActivate","isSupported","isDBOpenable","validateIndexedDBOpenable"],"sources":["C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\client\\remote_config_fetch_client.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\constants.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\errors.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\value.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\api.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\client\\caching_client.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\language.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\client\\rest_client.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\client\\retrying_client.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\remote_config.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\storage\\storage.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\storage\\storage_cache.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\register.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\api2.ts","C:\\Users\\Amit\\React\\flight-booking-website-2.0\\node_modules\\@firebase\\remote-config\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const RC_COMPONENT_NAME = 'remote-config';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status',\n  INDEXED_DB_UNAVAILABLE = 'indexed-db-unavailable'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [ErrorCode.INDEXED_DB_UNAVAILABLE]:\n    'Indexed DB is not supported by current browser'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig,\n  Value\n} from './public_types';\nimport { RemoteConfigAbortSignal } from './client/remote_config_fetch_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Value as ValueImpl } from './value';\nimport { LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n * @returns A {@link RemoteConfig} instance.\n *\n * @public\n */\nexport function getRemoteConfig(app: FirebaseApp = getApp()): RemoteConfig {\n  app = getModularInstance(app);\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n  return rcProvider.getImmediate();\n}\n\n/**\n * Makes the last fetched config available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function activate(remoteConfig: RemoteConfig): Promise<boolean> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n    rc._storage.getLastSuccessfulFetchResponse(),\n    rc._storage.getActiveConfigEtag()\n  ]);\n  if (\n    !lastSuccessfulFetchResponse ||\n    !lastSuccessfulFetchResponse.config ||\n    !lastSuccessfulFetchResponse.eTag ||\n    lastSuccessfulFetchResponse.eTag === activeConfigEtag\n  ) {\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n  }\n  await Promise.all([\n    rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n    rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n  ]);\n  return true;\n}\n\n/**\n * Ensures the last activated config are available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\n * @public\n */\nexport function ensureInitialized(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n  return rc._initializePromise;\n}\n\n/**\n * Fetches and caches configuration from the Remote Config service.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @public\n */\nexport async function fetchConfig(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n  const abortSignal = new RemoteConfigAbortSignal();\n\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n  }, rc.settings.fetchTimeoutMillis);\n\n  // Catches *all* errors thrown by client so status can be set consistently.\n  try {\n    await rc._client.fetch({\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal\n    });\n\n    await rc._storageCache.setLastFetchStatus('success');\n  } catch (e) {\n    const lastFetchStatus = hasErrorCode(e as Error, ErrorCode.FETCH_THROTTLE)\n      ? 'throttle'\n      : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n  }\n}\n\n/**\n * Gets all config.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns All config.\n *\n * @public\n */\nexport function getAll(remoteConfig: RemoteConfig): Record<string, Value> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  return getAllKeys(\n    rc._storageCache.getActiveConfig(),\n    rc.defaultConfig\n  ).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {} as Record<string, Value>);\n}\n\n/**\n * Gets the value for the given key as a boolean.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a boolean.\n * @public\n */\nexport function getBoolean(remoteConfig: RemoteConfig, key: string): boolean {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n\n/**\n * Gets the value for the given key as a number.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a number.\n *\n * @public\n */\nexport function getNumber(remoteConfig: RemoteConfig, key: string): number {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n\n/**\n * Gets the value for the given key as a string.\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a string.\n *\n * @public\n */\nexport function getString(remoteConfig: RemoteConfig, key: string): string {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n\n/**\n * Gets the {@link Value} for the given key.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key.\n *\n * @public\n */\nexport function getValue(remoteConfig: RemoteConfig, key: string): Value {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(\n      `A value was requested for key \"${key}\" before SDK initialization completed.` +\n        ' Await on ensureInitialized if the intent was to get a previously activated value.'\n    );\n  }\n  const activeConfig = rc._storageCache.getActiveConfig();\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new ValueImpl('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new ValueImpl('default', String(rc.defaultConfig[key]));\n  }\n  rc._logger.debug(\n    `Returning static value for key \"${key}\".` +\n      ' Define a default or remote value if this is unintentional.'\n  );\n  return new ValueImpl('static');\n}\n\n/**\n * Defines the log level to use.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param logLevel - The log level to set.\n *\n * @public\n */\nexport function setLogLevel(\n  remoteConfig: RemoteConfig,\n  logLevel: RemoteConfigLogLevel\n): void {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n    case 'silent':\n      rc._logger.logLevel = FirebaseLogLevel.SILENT;\n      break;\n    default:\n      rc._logger.logLevel = FirebaseLogLevel.ERROR;\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] =\n      await Promise.all([\n        this.storage.getLastSuccessfulFetchTimestampMillis(),\n        this.storage.getLastSuccessfulFetchResponse()\n      ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: _FirebaseInstallationsInternal,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if ((originalError as Error)?.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: (originalError as Error)?.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: (originalError as Error)?.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e as Error)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  RemoteConfigSettings\n} from './public_types';\nimport { StorageCache } from './storage/storage_cache';\nimport { RemoteConfigFetchClient } from './client/remote_config_fetch_client';\nimport { Storage } from './storage/storage';\nimport { Logger } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  /**\n   * Tracks completion of initialization promise.\n   * @internal\n   */\n  _isInitializationComplete = false;\n\n  /**\n   * De-duplicates initialization calls.\n   * @internal\n   */\n  _initializePromise?: Promise<void>;\n\n  settings: RemoteConfigSettings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    /**\n     * @internal\n     */\n    readonly _client: RemoteConfigFetchClient,\n    /**\n     * @internal\n     */\n    readonly _storageCache: StorageCache,\n    /**\n     * @internal\n     */\n    readonly _storage: Storage,\n    /**\n     * @internal\n     */\n    readonly _logger: Logger\n  ) {}\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && (originalError as Error)?.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n      };\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(\n        ERROR_FACTORY.create(ErrorCode.STORAGE_OPEN, {\n          originalErrorMessage: (error as Error)?.message\n        })\n      );\n    }\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise =\n      this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis =\n      await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis =\n        lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { RemoteConfig } from './public_types';\nimport { name as packageName, version } from '../package.json';\nimport { ensureInitialized } from './api';\nimport { CachingClient } from './client/caching_client';\nimport { RestClient } from './client/rest_client';\nimport { RetryingClient } from './client/retrying_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, ERROR_FACTORY } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Storage } from './storage/storage';\nimport { StorageCache } from './storage/storage_cache';\n// This needs to be in the same file that calls `getProvider()` on the component\n// or it will get tree-shaken out.\nimport '@firebase/installations';\n\nexport function registerRemoteConfig(): void {\n  _registerComponent(\n    new Component(\n      RC_COMPONENT_NAME,\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(packageName, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(packageName, version, '__BUILD_TARGET__');\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    { instanceIdentifier: namespace }: InstanceFactoryOptions\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container\n      .getProvider('installations-internal')\n      .getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n    // Guards against the SDK being used when indexedDB is not available.\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNAVAILABLE);\n    }\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfigImpl(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ensureInitialized(remoteConfigInstance);\n\n    return remoteConfigInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RemoteConfig } from './public_types';\nimport { activate, fetchConfig } from './api';\nimport {\n  getModularInstance,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\n *\n * Performs fetch and activate operations, as a convenience.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function fetchAndActivate(\n  remoteConfig: RemoteConfig\n): Promise<boolean> {\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n\n/**\n * This method provides two different checks:\n *\n * 1. Check if IndexedDB exists in the browser environment.\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\n *\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\n * can be initialized in this environment, or false if it cannot.\n * @public\n */\nexport async function isSupported(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n","/**\n * Firebase Remote Config\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerRemoteConfig } from './register';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport * from './api';\nexport * from './api2';\nexport * from './public_types';\n\n/** register component and version */\nregisterRemoteConfig();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}